4. Write a program to implement Best First Search.

Aim:

To write a program to implement a best first search using python
Algorithm:
Step 1: Create 2 empty lists: OPEN and CLOSED
Step 2: Start from the initial node (say N) and put it in the ‘ordered’ OPEN list
Step 3: Repeat the next steps until the GOAL node is reached

1. If the OPEN list is empty, then EXIT the loop returning ‘False’
2. Select the first/top node (say N) in the OPEN list and move it to the
CLOSED list. Also, capture the information of the parent node
3. If N is a GOAL node, then move the node to the Closed list and exit the
loop returning ‘True’. The solution can be found by backtracking the path
4. If N is not the GOAL node, expand node N to generate the ‘immediate’
next nodes linked to node N and add all those to the OPEN list
5. Reorder the nodes in the OPEN list in ascending order according to an
evaluation function f(n)

Program:
from queue import PriorityQueue
v = 5
graph = [[] for i in range(v)]
def best_first_search(source, target, n):
visited = [0] * n
visited[0] = True
pq = PriorityQueue()
pq.put((0, source))
while pq.empty() == False:
u = pq.get()[1]
print(u, end=" ")
if u == target:
break
for v, c in graph[u]:
if visited[v] == False:

visited[v] = True
pq.put((c, v))
print()
def addedge(x, y, cost):
graph[x].append((y, cost))
graph[y].append((x, cost))
addedge(0, 1, 5)
addedge(0, 2, 1)
addedge(2, 3, 2)
addedge(1, 4, 1)
addedge(3, 4, 2)
source = 0
target = 4
best_first_search(0,5,7)
